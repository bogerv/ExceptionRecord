package main

import (
	"database/sql"
	_ "lms/routers"
	"log"

	_ "github.com/go-sql-driver/mysql"

	"net/http"

	"github.com/gin-gonic/gin"
)

type User struct {
	Username string `form:"username" json:"username" binding:"required"`
	Password string `form:"passwd" json:"passwd" bdinding:"required"`
	Age      int    `form:"age" json:"age"`
}

func main() {
	/*Open MySql*/
	db, err := sql.Open("mysql", "root:Mit000@tcp(127.0.0.1:3306)/bogerv?parseTime=true")
	defer db.Close()
	if err != nil {
		log.Fatalln(err)
	}

	db.SetMaxIdleConns(20)
	db.SetMaxOpenConns(20)

	if err := db.Ping(); err != nil {
		log.Fatalln(err)
	}
	/*Open MySql*/

	/*Config Router*/
	router := gin.Default()

	router.GET("/", func(c *gin.Context) {
		c.String(http.StatusOK, "Hello World")
	})
	// router.GET("/user/:name", func(c *gin.Context) {
	// 	name := c.Param("name")
	// 	c.String(http.StatusOK, "Hello %s", name)
	// })
	// router.GET("/user/:name/*action", func(c *gin.Context) {
	// 	name := c.Param("name")
	// 	action := c.Param("action")
	// 	message := name + " is " + action
	// 	c.String(http.StatusOK, message)
	// })
	// // localhost:8000/welcome?firstname=bogerv&lastname=wang
	// router.GET("/welcome", func(c *gin.Context) {
	// 	//当firstname为空字串的时候，并不会使用默认的Guest值，空值也是值，DefaultQuery只作用于key不存在的时候，提供默认值。
	// 	firstname := c.DefaultQuery("firstname", "Guest")
	// 	lastname := c.Query("lastname")

	// 	c.String(http.StatusOK, "Hello %s %s", firstname, lastname)
	// })
	// router.POST("/form_post", func(c *gin.Context) {
	// 	message := c.PostForm("message")
	// 	// message, _ := c.GetPostForm("messgae")
	// 	nick := c.DefaultPostForm("nick", "anonymous")

	// 	c.JSON(http.StatusOK, gin.H{
	// 		"status": gin.H{
	// 			"status_code": http.StatusOK,
	// 			"status":      "ok",
	// 		},
	// 		"message": message,
	// 		"nick":    nick,
	// 	})
	// })
	// router.PUT("/post", func(c *gin.Context) {
	// 	id := c.Query("id")
	// 	page := c.DefaultQuery("page", "0")
	// 	name := c.PostForm("name")
	// 	message := c.PostForm("message")
	// 	fmt.Printf("id: %s; page: %s; name: %s; message: %s \n", id, page, name, message)
	// 	c.JSON(http.StatusOK, gin.H{
	// 		"status_code": http.StatusOK,
	// 	})
	// })
	// router.POST("/upload", func(c *gin.Context) {
	// 	name := c.PostForm("name")
	// 	fmt.Println(name)
	// 	file, header, err := c.Request.FormFile("upload")
	// 	if err != nil {
	// 		c.String(http.StatusBadRequest, "Bad request")
	// 		return
	// 	}
	// 	filename := header.Filename

	// 	fmt.Println(file, err, filename)

	// 	out, err := os.Create(filename)
	// 	if err != nil {
	// 		log.Fatal(err)
	// 	}
	// 	defer out.Close()
	// 	_, err = io.Copy(out, file)
	// 	if err != nil {
	// 		log.Fatal(err)
	// 	}
	// 	c.String(http.StatusCreated, "upload successful")
	// })
	// router.POST("/multi/upload", func(c *gin.Context) {
	// 	err := c.Request.ParseMultipartForm(200000)
	// 	if err != nil {
	// 		log.Fatal(err)
	// 	}

	// 	formdata := c.Request.MultipartForm

	// 	files := formdata.File["upload"]
	// 	for i := range files {
	// 		file, err := files[i].Open()
	// 		defer file.Close()
	// 		if err != nil {
	// 			log.Fatal(err)
	// 		}

	// 		out, err := os.Create(files[i].Filename)

	// 		defer out.Close()

	// 		if err != nil {
	// 			log.Fatal(err)
	// 		}

	// 		_, err = io.Copy(out, file)

	// 		if err != nil {
	// 			log.Fatal(err)
	// 		}

	// 		c.String(http.StatusCreated, "upload successful")

	// 	}

	// })

	// router.LoadHTMLGlob("templates/*")
	// router.GET("/upload", func(c *gin.Context) {
	// 	c.HTML(http.StatusOK, "upload.html", gin.H{})
	// })

	// router.POST("/login", func(c *gin.Context) {
	// 	var user User
	// 	var err error
	// 	contentType := c.Request.Header.Get("Content-Type")

	// 	switch contentType {
	// 	case "application/json":
	// 		err = c.BindJSON(&user)
	// 	case "application/x-www-form-urlencoded":
	// 		err = c.BindWith(&user, binding.Form)
	// 	}

	// 	if err != nil {
	// 		fmt.Println(err)
	// 		log.Fatal(err)
	// 	}

	// 	c.JSON(http.StatusOK, gin.H{
	// 		"user":   user.Username,
	// 		"passwd": user.Password,
	// 		"age":    user.Age,
	// 	})

	// })
	// router.POST("/login2", func(c *gin.Context) {
	// 	var user User
	// 	// c.Bind，它会更加content-type自动推断是bind表单还是json的参数。
	// 	err := c.Bind(&user)
	// 	if err != nil {
	// 		fmt.Println(err)
	// 		log.Fatal(err)
	// 	}

	// 	c.JSON(http.StatusOK, gin.H{
	// 		"username": user.Username,
	// 		"passwd":   user.Password,
	// 		"age":      user.Age,
	// 	})

	// })
	// router.GET("/render", func(c *gin.Context) {
	// 	contentType := c.DefaultQuery("content_type", "json")
	// 	if contentType == "json" {
	// 		c.JSON(http.StatusOK, gin.H{
	// 			"user":   "rsj217",
	// 			"passwd": "123",
	// 		})
	// 	} else if contentType == "xml" {
	// 		c.XML(http.StatusOK, gin.H{
	// 			"user":   "rsj217",
	// 			"passwd": "123",
	// 		})
	// 	}
	// })
	// // 重定向
	// router.GET("/redict/google", func(c *gin.Context) {
	// 	c.Redirect(http.StatusMovedPermanently, "https://google.com")
	// })
	// // 分组路由
	// v1 := router.Group("/v1")

	// v1.GET("/login", func(c *gin.Context) {
	// 	c.String(http.StatusOK, "v1 login")
	// })

	// v2 := router.Group("/v2")

	// v2.GET("/login", func(c *gin.Context) {
	// 	c.String(http.StatusOK, "v2 login")
	// })

	router.Run(":8000")
}
